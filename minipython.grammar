Package minipython;

Helpers
	digit = ['0' .. '9'];
	letter = ['a' .. 'z']|['A' .. 'Z']; 
	cr = 13; 
	lf = 10;
	all = [0..127]; 
	eol = lf | cr | cr lf ;
	eof = 26;
	not_eol = [all - [cr + lf]]; 


Tokens
	tab = 9;
	plus = '+';
	minus = '-';
	mult = '*';
	dot = '.';
	dmult = '**';
	div = '/';
	eq = '=';
	exclam = '!';
	dictt = 'dict';
	def = 'def';
	function = def id l_par argument? r_par semi statement;
	statement = tab* if comparison semi statement|tab* while comparison semi statement|tab* for id in id semi statement|tab* return expression|tab* print expression (comma expression)*|tab* id ( eq | minus eq | div eq ) expression|tab* id l_br expression r_br eq expression|tab* functioncall|import;
	argument = id (eq value )? ( comma id (eq value )?)*;
	comparison = expression ( great | less | exclam eq | eq eq) expression| true| false;
	module = ( id dot ) * id;
	expression =  expression ( plus | minus | mult | div | dmult ) expression| id l_br expression r_br| assert expression (comma expression )| functioncall| value| id| l_par expression r_par| l_br value ( comma value)* r_br;
	value = id dot functioncall | number | string | string;
	functioncall= id l_par arglist? r_par;
	import = imp module (as id) ( comma module (as id) )*|from module imp id (as id) ( comma id (as id) )*;
	arglist = expression ( comma expression )*;
	logic_plus = '&&';
	l_par = '(';
	r_par = ')';
	l_br = '[';
	r_br = ']';
	comma=',';
	qmark = '?';
	gqmark = ';';
	if = 'if';
	elif = 'elif';
	else = 'else';
	while = 'while';
	imp = 'import';
	for = 'for';
	from = 'from';
	assert = 'assert';
	in = 'in';
	as = 'as';
	print = 'print';
	return = 'return';
	less = '<';
	great = '>';
	true = 'true';
	semi = ':';
	false = 'false';
	quote2 = '"';
	blank = (' ' | lf | cr);
	line_comment = '#' not_eol* eol; 
	number = digit+ | (digit+ '.' digit+);
	id = letter (letter | digit)*;
	string = quote2 not_eol* quote2;
	goal = (function|statement)* eof;

Ignored Tokens
	blank, line_comment;
