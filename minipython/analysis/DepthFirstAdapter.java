/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import java.util.*;
import minipython.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getPGoal().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAGoal(AGoal node)
    {
        defaultIn(node);
    }

    public void outAGoal(AGoal node)
    {
        defaultOut(node);
    }

    public void caseAGoal(AGoal node)
    {
        inAGoal(node);
        {
            Object temp[] = node.getCommands().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PCommands) temp[i]).apply(this);
            }
        }
        outAGoal(node);
    }

    public void inAFuncCommands(AFuncCommands node)
    {
        defaultIn(node);
    }

    public void outAFuncCommands(AFuncCommands node)
    {
        defaultOut(node);
    }

    public void caseAFuncCommands(AFuncCommands node)
    {
        inAFuncCommands(node);
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
        }
        outAFuncCommands(node);
    }

    public void inAStateCommands(AStateCommands node)
    {
        defaultIn(node);
    }

    public void outAStateCommands(AStateCommands node)
    {
        defaultOut(node);
    }

    public void caseAStateCommands(AStateCommands node)
    {
        inAStateCommands(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAStateCommands(node);
    }

    public void inAIdValue(AIdValue node)
    {
        defaultIn(node);
    }

    public void outAIdValue(AIdValue node)
    {
        defaultOut(node);
    }

    public void caseAIdValue(AIdValue node)
    {
        inAIdValue(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            Object temp[] = node.getValue().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PValue) temp[i]).apply(this);
            }
        }
        outAIdValue(node);
    }

    public void inAIdentifierDot(AIdentifierDot node)
    {
        defaultIn(node);
    }

    public void outAIdentifierDot(AIdentifierDot node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierDot(AIdentifierDot node)
    {
        inAIdentifierDot(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdentifierDot(node);
    }

    public void inAModule(AModule node)
    {
        defaultIn(node);
    }

    public void outAModule(AModule node)
    {
        defaultOut(node);
    }

    public void caseAModule(AModule node)
    {
        inAModule(node);
        {
            Object temp[] = node.getIdentifierDot().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PIdentifierDot) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAModule(node);
    }

    public void inAFunction(AFunction node)
    {
        defaultIn(node);
    }

    public void outAFunction(AFunction node)
    {
        defaultOut(node);
    }

    public void caseAFunction(AFunction node)
    {
        inAFunction(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            Object temp[] = node.getArgument().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PArgument) temp[i]).apply(this);
            }
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAFunction(node);
    }

    public void inAEqualValue(AEqualValue node)
    {
        defaultIn(node);
    }

    public void outAEqualValue(AEqualValue node)
    {
        defaultOut(node);
    }

    public void caseAEqualValue(AEqualValue node)
    {
        inAEqualValue(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAEqualValue(node);
    }

    public void inACommaIdentifier(ACommaIdentifier node)
    {
        defaultIn(node);
    }

    public void outACommaIdentifier(ACommaIdentifier node)
    {
        defaultOut(node);
    }

    public void caseACommaIdentifier(ACommaIdentifier node)
    {
        inACommaIdentifier(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            Object temp[] = node.getEqualValue().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PEqualValue) temp[i]).apply(this);
            }
        }
        outACommaIdentifier(node);
    }

    public void inAArgument(AArgument node)
    {
        defaultIn(node);
    }

    public void outAArgument(AArgument node)
    {
        defaultOut(node);
    }

    public void caseAArgument(AArgument node)
    {
        inAArgument(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            Object temp[] = node.getEqualValue().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PEqualValue) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getCommaIdentifier().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PCommaIdentifier) temp[i]).apply(this);
            }
        }
        outAArgument(node);
    }

    public void inAIfStatement(AIfStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatement(AIfStatement node)
    {
        defaultOut(node);
    }

    public void caseAIfStatement(AIfStatement node)
    {
        inAIfStatement(node);
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAIfStatement(node);
    }

    public void inAWhileStatement(AWhileStatement node)
    {
        defaultIn(node);
    }

    public void outAWhileStatement(AWhileStatement node)
    {
        defaultOut(node);
    }

    public void caseAWhileStatement(AWhileStatement node)
    {
        inAWhileStatement(node);
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAWhileStatement(node);
    }

    public void inAForStatement(AForStatement node)
    {
        defaultIn(node);
    }

    public void outAForStatement(AForStatement node)
    {
        defaultOut(node);
    }

    public void caseAForStatement(AForStatement node)
    {
        inAForStatement(node);
        if(node.getId1() != null)
        {
            node.getId1().apply(this);
        }
        if(node.getId2() != null)
        {
            node.getId2().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAForStatement(node);
    }

    public void inAReturnStatement(AReturnStatement node)
    {
        defaultIn(node);
    }

    public void outAReturnStatement(AReturnStatement node)
    {
        defaultOut(node);
    }

    public void caseAReturnStatement(AReturnStatement node)
    {
        inAReturnStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAReturnStatement(node);
    }

    public void inAPrintSimpleStatement(APrintSimpleStatement node)
    {
        defaultIn(node);
    }

    public void outAPrintSimpleStatement(APrintSimpleStatement node)
    {
        defaultOut(node);
    }

    public void caseAPrintSimpleStatement(APrintSimpleStatement node)
    {
        inAPrintSimpleStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            Object temp[] = node.getCommaExpression().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PCommaExpression) temp[i]).apply(this);
            }
        }
        outAPrintSimpleStatement(node);
    }

    public void inAEqualsStatement(AEqualsStatement node)
    {
        defaultIn(node);
    }

    public void outAEqualsStatement(AEqualsStatement node)
    {
        defaultOut(node);
    }

    public void caseAEqualsStatement(AEqualsStatement node)
    {
        inAEqualsStatement(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAEqualsStatement(node);
    }

    public void inASubeqStatement(ASubeqStatement node)
    {
        defaultIn(node);
    }

    public void outASubeqStatement(ASubeqStatement node)
    {
        defaultOut(node);
    }

    public void caseASubeqStatement(ASubeqStatement node)
    {
        inASubeqStatement(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outASubeqStatement(node);
    }

    public void inADiveqStatement(ADiveqStatement node)
    {
        defaultIn(node);
    }

    public void outADiveqStatement(ADiveqStatement node)
    {
        defaultOut(node);
    }

    public void caseADiveqStatement(ADiveqStatement node)
    {
        inADiveqStatement(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outADiveqStatement(node);
    }

    public void inAListStatement(AListStatement node)
    {
        defaultIn(node);
    }

    public void outAListStatement(AListStatement node)
    {
        defaultOut(node);
    }

    public void caseAListStatement(AListStatement node)
    {
        inAListStatement(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getExp8() != null)
        {
            node.getExp8().apply(this);
        }
        if(node.getExp9() != null)
        {
            node.getExp9().apply(this);
        }
        outAListStatement(node);
    }

    public void inAAssertStatement(AAssertStatement node)
    {
        defaultIn(node);
    }

    public void outAAssertStatement(AAssertStatement node)
    {
        defaultOut(node);
    }

    public void caseAAssertStatement(AAssertStatement node)
    {
        inAAssertStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            Object temp[] = node.getCommaExpression().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PCommaExpression) temp[i]).apply(this);
            }
        }
        outAAssertStatement(node);
    }

    public void inAAssertComparisonStatement(AAssertComparisonStatement node)
    {
        defaultIn(node);
    }

    public void outAAssertComparisonStatement(AAssertComparisonStatement node)
    {
        defaultOut(node);
    }

    public void caseAAssertComparisonStatement(AAssertComparisonStatement node)
    {
        inAAssertComparisonStatement(node);
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        {
            Object temp[] = node.getCommaExpression().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PCommaExpression) temp[i]).apply(this);
            }
        }
        outAAssertComparisonStatement(node);
    }

    public void inAFunccallStatement(AFunccallStatement node)
    {
        defaultIn(node);
    }

    public void outAFunccallStatement(AFunccallStatement node)
    {
        defaultOut(node);
    }

    public void caseAFunccallStatement(AFunccallStatement node)
    {
        inAFunccallStatement(node);
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        outAFunccallStatement(node);
    }

    public void inAImportStatement(AImportStatement node)
    {
        defaultIn(node);
    }

    public void outAImportStatement(AImportStatement node)
    {
        defaultOut(node);
    }

    public void caseAImportStatement(AImportStatement node)
    {
        inAImportStatement(node);
        if(node.getImport() != null)
        {
            node.getImport().apply(this);
        }
        outAImportStatement(node);
    }

    public void inANegSign(ANegSign node)
    {
        defaultIn(node);
    }

    public void outANegSign(ANegSign node)
    {
        defaultOut(node);
    }

    public void caseANegSign(ANegSign node)
    {
        inANegSign(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outANegSign(node);
    }

    public void inAPosSign(APosSign node)
    {
        defaultIn(node);
    }

    public void outAPosSign(APosSign node)
    {
        defaultOut(node);
    }

    public void caseAPosSign(APosSign node)
    {
        inAPosSign(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPosSign(node);
    }

    public void inAIntegerNumber(AIntegerNumber node)
    {
        defaultIn(node);
    }

    public void outAIntegerNumber(AIntegerNumber node)
    {
        defaultOut(node);
    }

    public void caseAIntegerNumber(AIntegerNumber node)
    {
        inAIntegerNumber(node);
        {
            Object temp[] = node.getSign().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PSign) temp[i]).apply(this);
            }
        }
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outAIntegerNumber(node);
    }

    public void inAFloatNumber(AFloatNumber node)
    {
        defaultIn(node);
    }

    public void outAFloatNumber(AFloatNumber node)
    {
        defaultOut(node);
    }

    public void caseAFloatNumber(AFloatNumber node)
    {
        inAFloatNumber(node);
        {
            Object temp[] = node.getSign().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PSign) temp[i]).apply(this);
            }
        }
        if(node.getFloat() != null)
        {
            node.getFloat().apply(this);
        }
        outAFloatNumber(node);
    }

    public void inAFuncCallValue(AFuncCallValue node)
    {
        defaultIn(node);
    }

    public void outAFuncCallValue(AFuncCallValue node)
    {
        defaultOut(node);
    }

    public void caseAFuncCallValue(AFuncCallValue node)
    {
        inAFuncCallValue(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        outAFuncCallValue(node);
    }

    public void inANumberValue(ANumberValue node)
    {
        defaultIn(node);
    }

    public void outANumberValue(ANumberValue node)
    {
        defaultOut(node);
    }

    public void caseANumberValue(ANumberValue node)
    {
        inANumberValue(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberValue(node);
    }

    public void inAStringValue(AStringValue node)
    {
        defaultIn(node);
    }

    public void outAStringValue(AStringValue node)
    {
        defaultOut(node);
    }

    public void caseAStringValue(AStringValue node)
    {
        inAStringValue(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringValue(node);
    }

    public void inAFunctionCall(AFunctionCall node)
    {
        defaultIn(node);
    }

    public void outAFunctionCall(AFunctionCall node)
    {
        defaultOut(node);
    }

    public void caseAFunctionCall(AFunctionCall node)
    {
        inAFunctionCall(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            Object temp[] = node.getArglist().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PArglist) temp[i]).apply(this);
            }
        }
        outAFunctionCall(node);
    }

    public void inACommaExpression(ACommaExpression node)
    {
        defaultIn(node);
    }

    public void outACommaExpression(ACommaExpression node)
    {
        defaultOut(node);
    }

    public void caseACommaExpression(ACommaExpression node)
    {
        inACommaExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outACommaExpression(node);
    }

    public void inACommaValue(ACommaValue node)
    {
        defaultIn(node);
    }

    public void outACommaValue(ACommaValue node)
    {
        defaultOut(node);
    }

    public void caseACommaValue(ACommaValue node)
    {
        inACommaValue(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outACommaValue(node);
    }

    public void inAArglist(AArglist node)
    {
        defaultIn(node);
    }

    public void outAArglist(AArglist node)
    {
        defaultOut(node);
    }

    public void caseAArglist(AArglist node)
    {
        inAArglist(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            Object temp[] = node.getCommaExpression().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PCommaExpression) temp[i]).apply(this);
            }
        }
        outAArglist(node);
    }

    public void inAGreatComparison(AGreatComparison node)
    {
        defaultIn(node);
    }

    public void outAGreatComparison(AGreatComparison node)
    {
        defaultOut(node);
    }

    public void caseAGreatComparison(AGreatComparison node)
    {
        inAGreatComparison(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAGreatComparison(node);
    }

    public void inALessComparison(ALessComparison node)
    {
        defaultIn(node);
    }

    public void outALessComparison(ALessComparison node)
    {
        defaultOut(node);
    }

    public void caseALessComparison(ALessComparison node)
    {
        inALessComparison(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outALessComparison(node);
    }

    public void inADifComparison(ADifComparison node)
    {
        defaultIn(node);
    }

    public void outADifComparison(ADifComparison node)
    {
        defaultOut(node);
    }

    public void caseADifComparison(ADifComparison node)
    {
        inADifComparison(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outADifComparison(node);
    }

    public void inAEqComparison(AEqComparison node)
    {
        defaultIn(node);
    }

    public void outAEqComparison(AEqComparison node)
    {
        defaultOut(node);
    }

    public void caseAEqComparison(AEqComparison node)
    {
        inAEqComparison(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAEqComparison(node);
    }

    public void inATrueComparison(ATrueComparison node)
    {
        defaultIn(node);
    }

    public void outATrueComparison(ATrueComparison node)
    {
        defaultOut(node);
    }

    public void caseATrueComparison(ATrueComparison node)
    {
        inATrueComparison(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueComparison(node);
    }

    public void inAFalseComparison(AFalseComparison node)
    {
        defaultIn(node);
    }

    public void outAFalseComparison(AFalseComparison node)
    {
        defaultOut(node);
    }

    public void caseAFalseComparison(AFalseComparison node)
    {
        inAFalseComparison(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseComparison(node);
    }

    public void inAAsIdentifier(AAsIdentifier node)
    {
        defaultIn(node);
    }

    public void outAAsIdentifier(AAsIdentifier node)
    {
        defaultOut(node);
    }

    public void caseAAsIdentifier(AAsIdentifier node)
    {
        inAAsIdentifier(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAsIdentifier(node);
    }

    public void inACommaModuleAsId(ACommaModuleAsId node)
    {
        defaultIn(node);
    }

    public void outACommaModuleAsId(ACommaModuleAsId node)
    {
        defaultOut(node);
    }

    public void caseACommaModuleAsId(ACommaModuleAsId node)
    {
        inACommaModuleAsId(node);
        if(node.getModule() != null)
        {
            node.getModule().apply(this);
        }
        {
            Object temp[] = node.getAsIdentifier().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PAsIdentifier) temp[i]).apply(this);
            }
        }
        outACommaModuleAsId(node);
    }

    public void inACommaIdAsId(ACommaIdAsId node)
    {
        defaultIn(node);
    }

    public void outACommaIdAsId(ACommaIdAsId node)
    {
        defaultOut(node);
    }

    public void caseACommaIdAsId(ACommaIdAsId node)
    {
        inACommaIdAsId(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            Object temp[] = node.getAsIdentifier().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PAsIdentifier) temp[i]).apply(this);
            }
        }
        outACommaIdAsId(node);
    }

    public void inAImportAsImport(AImportAsImport node)
    {
        defaultIn(node);
    }

    public void outAImportAsImport(AImportAsImport node)
    {
        defaultOut(node);
    }

    public void caseAImportAsImport(AImportAsImport node)
    {
        inAImportAsImport(node);
        if(node.getModule() != null)
        {
            node.getModule().apply(this);
        }
        {
            Object temp[] = node.getAsIdentifier().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PAsIdentifier) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getCommaModuleAsId().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PCommaModuleAsId) temp[i]).apply(this);
            }
        }
        outAImportAsImport(node);
    }

    public void inAFromImportImport(AFromImportImport node)
    {
        defaultIn(node);
    }

    public void outAFromImportImport(AFromImportImport node)
    {
        defaultOut(node);
    }

    public void caseAFromImportImport(AFromImportImport node)
    {
        inAFromImportImport(node);
        if(node.getModule() != null)
        {
            node.getModule().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            Object temp[] = node.getAsIdentifier().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PAsIdentifier) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getCommaIdAsId().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PCommaIdAsId) temp[i]).apply(this);
            }
        }
        outAFromImportImport(node);
    }

    public void inAMoreValues(AMoreValues node)
    {
        defaultIn(node);
    }

    public void outAMoreValues(AMoreValues node)
    {
        defaultOut(node);
    }

    public void caseAMoreValues(AMoreValues node)
    {
        inAMoreValues(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        {
            Object temp[] = node.getCommaValue().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PCommaValue) temp[i]).apply(this);
            }
        }
        outAMoreValues(node);
    }

    public void inAAdditionExpression(AAdditionExpression node)
    {
        defaultIn(node);
    }

    public void outAAdditionExpression(AAdditionExpression node)
    {
        defaultOut(node);
    }

    public void caseAAdditionExpression(AAdditionExpression node)
    {
        inAAdditionExpression(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAAdditionExpression(node);
    }

    public void inASubtractionExpression(ASubtractionExpression node)
    {
        defaultIn(node);
    }

    public void outASubtractionExpression(ASubtractionExpression node)
    {
        defaultOut(node);
    }

    public void caseASubtractionExpression(ASubtractionExpression node)
    {
        inASubtractionExpression(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outASubtractionExpression(node);
    }

    public void inAMultiplicationExpression(AMultiplicationExpression node)
    {
        defaultIn(node);
    }

    public void outAMultiplicationExpression(AMultiplicationExpression node)
    {
        defaultOut(node);
    }

    public void caseAMultiplicationExpression(AMultiplicationExpression node)
    {
        inAMultiplicationExpression(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAMultiplicationExpression(node);
    }

    public void inADivisionExpression(ADivisionExpression node)
    {
        defaultIn(node);
    }

    public void outADivisionExpression(ADivisionExpression node)
    {
        defaultOut(node);
    }

    public void caseADivisionExpression(ADivisionExpression node)
    {
        inADivisionExpression(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outADivisionExpression(node);
    }

    public void inAPowerExpression(APowerExpression node)
    {
        defaultIn(node);
    }

    public void outAPowerExpression(APowerExpression node)
    {
        defaultOut(node);
    }

    public void caseAPowerExpression(APowerExpression node)
    {
        inAPowerExpression(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAPowerExpression(node);
    }

    public void inAIdExpression(AIdExpression node)
    {
        defaultIn(node);
    }

    public void outAIdExpression(AIdExpression node)
    {
        defaultOut(node);
    }

    public void caseAIdExpression(AIdExpression node)
    {
        inAIdExpression(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAIdExpression(node);
    }

    public void inAFuncCallExpression(AFuncCallExpression node)
    {
        defaultIn(node);
    }

    public void outAFuncCallExpression(AFuncCallExpression node)
    {
        defaultOut(node);
    }

    public void caseAFuncCallExpression(AFuncCallExpression node)
    {
        inAFuncCallExpression(node);
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        outAFuncCallExpression(node);
    }

    public void inAValExpression(AValExpression node)
    {
        defaultIn(node);
    }

    public void outAValExpression(AValExpression node)
    {
        defaultOut(node);
    }

    public void caseAValExpression(AValExpression node)
    {
        inAValExpression(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAValExpression(node);
    }

    public void inAId2Expression(AId2Expression node)
    {
        defaultIn(node);
    }

    public void outAId2Expression(AId2Expression node)
    {
        defaultOut(node);
    }

    public void caseAId2Expression(AId2Expression node)
    {
        inAId2Expression(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAId2Expression(node);
    }

    public void inAParExpExpression(AParExpExpression node)
    {
        defaultIn(node);
    }

    public void outAParExpExpression(AParExpExpression node)
    {
        defaultOut(node);
    }

    public void caseAParExpExpression(AParExpExpression node)
    {
        inAParExpExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAParExpExpression(node);
    }

    public void inABrExpExpression(ABrExpExpression node)
    {
        defaultIn(node);
    }

    public void outABrExpExpression(ABrExpExpression node)
    {
        defaultOut(node);
    }

    public void caseABrExpExpression(ABrExpExpression node)
    {
        inABrExpExpression(node);
        {
            Object temp[] = node.getMoreValues().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PMoreValues) temp[i]).apply(this);
            }
        }
        outABrExpExpression(node);
    }

    public void inAExpressionAloneExpression(AExpressionAloneExpression node)
    {
        defaultIn(node);
    }

    public void outAExpressionAloneExpression(AExpressionAloneExpression node)
    {
        defaultOut(node);
    }

    public void caseAExpressionAloneExpression(AExpressionAloneExpression node)
    {
        inAExpressionAloneExpression(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAExpressionAloneExpression(node);
    }
}
