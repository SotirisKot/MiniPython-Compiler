/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import java.util.*;
import minipython.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable in;
    private Hashtable out;

    public Object getIn(Node node)
    {
        if(in == null)
        {
            return null;
        }

        return in.get(node);
    }

    public void setIn(Node node, Object in)
    {
        if(this.in == null)
        {
            this.in = new Hashtable(1);
        }

        if(in != null)
        {
            this.in.put(node, in);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(out == null)
        {
            return null;
        }

        return out.get(node);
    }

    public void setOut(Node node, Object out)
    {
        if(this.out == null)
        {
            this.out = new Hashtable(1);
        }

        if(out != null)
        {
            this.out.put(node, out);
        }
        else
        {
            this.out.remove(node);
        }
    }
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAGoal(AGoal node)
    {
        defaultCase(node);
    }

    public void caseAFuncCommands(AFuncCommands node)
    {
        defaultCase(node);
    }

    public void caseAStateCommands(AStateCommands node)
    {
        defaultCase(node);
    }

    public void caseAIdValue(AIdValue node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierDot(AIdentifierDot node)
    {
        defaultCase(node);
    }

    public void caseAModule(AModule node)
    {
        defaultCase(node);
    }

    public void caseAFunction(AFunction node)
    {
        defaultCase(node);
    }

    public void caseAEqualValue(AEqualValue node)
    {
        defaultCase(node);
    }

    public void caseACommaIdentifier(ACommaIdentifier node)
    {
        defaultCase(node);
    }

    public void caseAArgument(AArgument node)
    {
        defaultCase(node);
    }

    public void caseAIfStatement(AIfStatement node)
    {
        defaultCase(node);
    }

    public void caseAWhileStatement(AWhileStatement node)
    {
        defaultCase(node);
    }

    public void caseAForStatement(AForStatement node)
    {
        defaultCase(node);
    }

    public void caseAReturnStatement(AReturnStatement node)
    {
        defaultCase(node);
    }

    public void caseAPrintSimpleStatement(APrintSimpleStatement node)
    {
        defaultCase(node);
    }

    public void caseAEqualsStatement(AEqualsStatement node)
    {
        defaultCase(node);
    }

    public void caseASubeqStatement(ASubeqStatement node)
    {
        defaultCase(node);
    }

    public void caseADiveqStatement(ADiveqStatement node)
    {
        defaultCase(node);
    }

    public void caseAListStatement(AListStatement node)
    {
        defaultCase(node);
    }

    public void caseAAssertStatement(AAssertStatement node)
    {
        defaultCase(node);
    }

    public void caseAAssertComparisonStatement(AAssertComparisonStatement node)
    {
        defaultCase(node);
    }

    public void caseAFunccallStatement(AFunccallStatement node)
    {
        defaultCase(node);
    }

    public void caseAImportStatement(AImportStatement node)
    {
        defaultCase(node);
    }

    public void caseANegSign(ANegSign node)
    {
        defaultCase(node);
    }

    public void caseAPosSign(APosSign node)
    {
        defaultCase(node);
    }

    public void caseAIntegerNumber(AIntegerNumber node)
    {
        defaultCase(node);
    }

    public void caseAFloatNumber(AFloatNumber node)
    {
        defaultCase(node);
    }

    public void caseAFuncCallValue(AFuncCallValue node)
    {
        defaultCase(node);
    }

    public void caseANumberValue(ANumberValue node)
    {
        defaultCase(node);
    }

    public void caseAStringValue(AStringValue node)
    {
        defaultCase(node);
    }

    public void caseAFunctionCall(AFunctionCall node)
    {
        defaultCase(node);
    }

    public void caseACommaExpression(ACommaExpression node)
    {
        defaultCase(node);
    }

    public void caseACommaValue(ACommaValue node)
    {
        defaultCase(node);
    }

    public void caseAArglist(AArglist node)
    {
        defaultCase(node);
    }

    public void caseAGreatComparison(AGreatComparison node)
    {
        defaultCase(node);
    }

    public void caseALessComparison(ALessComparison node)
    {
        defaultCase(node);
    }

    public void caseADifComparison(ADifComparison node)
    {
        defaultCase(node);
    }

    public void caseAEqComparison(AEqComparison node)
    {
        defaultCase(node);
    }

    public void caseATrueComparison(ATrueComparison node)
    {
        defaultCase(node);
    }

    public void caseAFalseComparison(AFalseComparison node)
    {
        defaultCase(node);
    }

    public void caseAAsIdentifier(AAsIdentifier node)
    {
        defaultCase(node);
    }

    public void caseACommaModuleAsId(ACommaModuleAsId node)
    {
        defaultCase(node);
    }

    public void caseACommaIdAsId(ACommaIdAsId node)
    {
        defaultCase(node);
    }

    public void caseAImportAsImport(AImportAsImport node)
    {
        defaultCase(node);
    }

    public void caseAFromImportImport(AFromImportImport node)
    {
        defaultCase(node);
    }

    public void caseAMoreValues(AMoreValues node)
    {
        defaultCase(node);
    }

    public void caseAAdditionExpression(AAdditionExpression node)
    {
        defaultCase(node);
    }

    public void caseASubtractionExpression(ASubtractionExpression node)
    {
        defaultCase(node);
    }

    public void caseAMultiplicationExpression(AMultiplicationExpression node)
    {
        defaultCase(node);
    }

    public void caseADivisionExpression(ADivisionExpression node)
    {
        defaultCase(node);
    }

    public void caseAPowerExpression(APowerExpression node)
    {
        defaultCase(node);
    }

    public void caseAIdExpression(AIdExpression node)
    {
        defaultCase(node);
    }

    public void caseAFuncCallExpression(AFuncCallExpression node)
    {
        defaultCase(node);
    }

    public void caseAValExpression(AValExpression node)
    {
        defaultCase(node);
    }

    public void caseAId2Expression(AId2Expression node)
    {
        defaultCase(node);
    }

    public void caseAParExpExpression(AParExpExpression node)
    {
        defaultCase(node);
    }

    public void caseABrExpExpression(ABrExpExpression node)
    {
        defaultCase(node);
    }

    public void caseAExpressionAloneExpression(AExpressionAloneExpression node)
    {
        defaultCase(node);
    }

    public void caseTTab(TTab node)
    {
        defaultCase(node);
    }

    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    public void caseTDmult(TDmult node)
    {
        defaultCase(node);
    }

    public void caseTMineq(TMineq node)
    {
        defaultCase(node);
    }

    public void caseTDiveq(TDiveq node)
    {
        defaultCase(node);
    }

    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    public void caseTEq(TEq node)
    {
        defaultCase(node);
    }

    public void caseTDeq(TDeq node)
    {
        defaultCase(node);
    }

    public void caseTExclam(TExclam node)
    {
        defaultCase(node);
    }

    public void caseTDictt(TDictt node)
    {
        defaultCase(node);
    }

    public void caseTDef(TDef node)
    {
        defaultCase(node);
    }

    public void caseTLogicPlus(TLogicPlus node)
    {
        defaultCase(node);
    }

    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    public void caseTLBr(TLBr node)
    {
        defaultCase(node);
    }

    public void caseTRBr(TRBr node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTQmark(TQmark node)
    {
        defaultCase(node);
    }

    public void caseTGqmark(TGqmark node)
    {
        defaultCase(node);
    }

    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    public void caseTElif(TElif node)
    {
        defaultCase(node);
    }

    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    public void caseTFor(TFor node)
    {
        defaultCase(node);
    }

    public void caseTFrom(TFrom node)
    {
        defaultCase(node);
    }

    public void caseTImp(TImp node)
    {
        defaultCase(node);
    }

    public void caseTAssert(TAssert node)
    {
        defaultCase(node);
    }

    public void caseTAs(TAs node)
    {
        defaultCase(node);
    }

    public void caseTPrint(TPrint node)
    {
        defaultCase(node);
    }

    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    public void caseTIn(TIn node)
    {
        defaultCase(node);
    }

    public void caseTLess(TLess node)
    {
        defaultCase(node);
    }

    public void caseTGreat(TGreat node)
    {
        defaultCase(node);
    }

    public void caseTDif(TDif node)
    {
        defaultCase(node);
    }

    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    public void caseTSemi(TSemi node)
    {
        defaultCase(node);
    }

    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    public void caseTQuote(TQuote node)
    {
        defaultCase(node);
    }

    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    public void caseTLineComment(TLineComment node)
    {
        defaultCase(node);
    }

    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    public void caseTFloat(TFloat node)
    {
        defaultCase(node);
    }

    public void caseTInteger(TInteger node)
    {
        defaultCase(node);
    }

    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(Node node)
    {
    }
}
