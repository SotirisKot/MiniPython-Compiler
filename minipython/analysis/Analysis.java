/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import minipython.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object in);
    Object getOut(Node node);
    void setOut(Node node, Object out);

    void caseStart(Start node);
    void caseAGoal(AGoal node);
    void caseAFuncCommands(AFuncCommands node);
    void caseAStateCommands(AStateCommands node);
    void caseAIdValue(AIdValue node);
    void caseAIdentifierDot(AIdentifierDot node);
    void caseAModule(AModule node);
    void caseAFunction(AFunction node);
    void caseAEqualValue(AEqualValue node);
    void caseACommaIdentifier(ACommaIdentifier node);
    void caseAArgument(AArgument node);
    void caseAIfStatement(AIfStatement node);
    void caseAWhileStatement(AWhileStatement node);
    void caseAForStatement(AForStatement node);
    void caseAReturnStatement(AReturnStatement node);
    void caseAPrintSimpleStatement(APrintSimpleStatement node);
    void caseAEqualsStatement(AEqualsStatement node);
    void caseASubeqStatement(ASubeqStatement node);
    void caseADiveqStatement(ADiveqStatement node);
    void caseAListStatement(AListStatement node);
    void caseAAssertStatement(AAssertStatement node);
    void caseAAssertComparisonStatement(AAssertComparisonStatement node);
    void caseAFunccallStatement(AFunccallStatement node);
    void caseAImportStatement(AImportStatement node);
    void caseANegSign(ANegSign node);
    void caseAPosSign(APosSign node);
    void caseAIntegerNumber(AIntegerNumber node);
    void caseAFloatNumber(AFloatNumber node);
    void caseAFuncCallValue(AFuncCallValue node);
    void caseANumberValue(ANumberValue node);
    void caseAStringValue(AStringValue node);
    void caseAFunctionCall(AFunctionCall node);
    void caseACommaExpression(ACommaExpression node);
    void caseACommaValue(ACommaValue node);
    void caseAArglist(AArglist node);
    void caseAGreatComparison(AGreatComparison node);
    void caseALessComparison(ALessComparison node);
    void caseADifComparison(ADifComparison node);
    void caseAEqComparison(AEqComparison node);
    void caseATrueComparison(ATrueComparison node);
    void caseAFalseComparison(AFalseComparison node);
    void caseAAsIdentifier(AAsIdentifier node);
    void caseACommaModuleAsId(ACommaModuleAsId node);
    void caseACommaIdAsId(ACommaIdAsId node);
    void caseAImportAsImport(AImportAsImport node);
    void caseAFromImportImport(AFromImportImport node);
    void caseAMoreValues(AMoreValues node);
    void caseAAdditionExpression(AAdditionExpression node);
    void caseASubtractionExpression(ASubtractionExpression node);
    void caseAMultiplicationExpression(AMultiplicationExpression node);
    void caseADivisionExpression(ADivisionExpression node);
    void caseAPowerExpression(APowerExpression node);
    void caseAIdExpression(AIdExpression node);
    void caseAFuncCallExpression(AFuncCallExpression node);
    void caseAValExpression(AValExpression node);
    void caseAId2Expression(AId2Expression node);
    void caseAParExpExpression(AParExpExpression node);
    void caseABrExpExpression(ABrExpExpression node);
    void caseAExpressionAloneExpression(AExpressionAloneExpression node);

    void caseTTab(TTab node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTDmult(TDmult node);
    void caseTMineq(TMineq node);
    void caseTDiveq(TDiveq node);
    void caseTDiv(TDiv node);
    void caseTDot(TDot node);
    void caseTEq(TEq node);
    void caseTDeq(TDeq node);
    void caseTExclam(TExclam node);
    void caseTDictt(TDictt node);
    void caseTDef(TDef node);
    void caseTLogicPlus(TLogicPlus node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBr(TLBr node);
    void caseTRBr(TRBr node);
    void caseTComma(TComma node);
    void caseTQmark(TQmark node);
    void caseTGqmark(TGqmark node);
    void caseTIf(TIf node);
    void caseTElif(TElif node);
    void caseTElse(TElse node);
    void caseTWhile(TWhile node);
    void caseTFor(TFor node);
    void caseTFrom(TFrom node);
    void caseTImp(TImp node);
    void caseTAssert(TAssert node);
    void caseTAs(TAs node);
    void caseTPrint(TPrint node);
    void caseTReturn(TReturn node);
    void caseTIn(TIn node);
    void caseTLess(TLess node);
    void caseTGreat(TGreat node);
    void caseTDif(TDif node);
    void caseTTrue(TTrue node);
    void caseTSemi(TSemi node);
    void caseTFalse(TFalse node);
    void caseTQuote(TQuote node);
    void caseTBlank(TBlank node);
    void caseTLineComment(TLineComment node);
    void caseTId(TId node);
    void caseTFloat(TFloat node);
    void caseTInteger(TInteger node);
    void caseTString(TString node);
    void caseEOF(EOF node);
}
