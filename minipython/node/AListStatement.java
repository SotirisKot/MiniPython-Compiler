/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AListStatement extends PStatement
{
    private TId _id_;
    private PExpression _exp8_;
    private PExpression _exp9_;

    public AListStatement()
    {
    }

    public AListStatement(
        TId _id_,
        PExpression _exp8_,
        PExpression _exp9_)
    {
        setId(_id_);

        setExp8(_exp8_);

        setExp9(_exp9_);

    }
    public Object clone()
    {
        return new AListStatement(
            (TId) cloneNode(_id_),
            (PExpression) cloneNode(_exp8_),
            (PExpression) cloneNode(_exp9_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAListStatement(this);
    }

    public TId getId()
    {
        return _id_;
    }

    public void setId(TId node)
    {
        if(_id_ != null)
        {
            _id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _id_ = node;
    }

    public PExpression getExp8()
    {
        return _exp8_;
    }

    public void setExp8(PExpression node)
    {
        if(_exp8_ != null)
        {
            _exp8_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _exp8_ = node;
    }

    public PExpression getExp9()
    {
        return _exp9_;
    }

    public void setExp9(PExpression node)
    {
        if(_exp9_ != null)
        {
            _exp9_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _exp9_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_id_)
            + toString(_exp8_)
            + toString(_exp9_);
    }

    void removeChild(Node child)
    {
        if(_id_ == child)
        {
            _id_ = null;
            return;
        }

        if(_exp8_ == child)
        {
            _exp8_ = null;
            return;
        }

        if(_exp9_ == child)
        {
            _exp9_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(_exp8_ == oldChild)
        {
            setExp8((PExpression) newChild);
            return;
        }

        if(_exp9_ == oldChild)
        {
            setExp9((PExpression) newChild);
            return;
        }

    }
}
