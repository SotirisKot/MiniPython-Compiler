/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AFloatNumber extends PNumber
{
    private final LinkedList _sign_ = new TypedLinkedList(new Sign_Cast());
    private TFloat _float_;

    public AFloatNumber()
    {
    }

    public AFloatNumber(
        List _sign_,
        TFloat _float_)
    {
        {
            this._sign_.clear();
            this._sign_.addAll(_sign_);
        }

        setFloat(_float_);

    }
    public Object clone()
    {
        return new AFloatNumber(
            cloneList(_sign_),
            (TFloat) cloneNode(_float_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFloatNumber(this);
    }

    public LinkedList getSign()
    {
        return _sign_;
    }

    public void setSign(List list)
    {
        _sign_.clear();
        _sign_.addAll(list);
    }

    public TFloat getFloat()
    {
        return _float_;
    }

    public void setFloat(TFloat node)
    {
        if(_float_ != null)
        {
            _float_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _float_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_sign_)
            + toString(_float_);
    }

    void removeChild(Node child)
    {
        if(_sign_.remove(child))
        {
            return;
        }

        if(_float_ == child)
        {
            _float_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        for(ListIterator i = _sign_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(_float_ == oldChild)
        {
            setFloat((TFloat) newChild);
            return;
        }

    }

    private class Sign_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PSign node = (PSign) o;

            if((node.parent() != null) &&
                (node.parent() != AFloatNumber.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AFloatNumber.this))
            {
                node.parent(AFloatNumber.this);
            }

            return node;
        }
    }
}
