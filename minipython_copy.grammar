/*
* Test Comments
*/

Package minipython;

Helpers
	digit = ['0' .. '9'];
	letter = ['a' .. 'z']|['A' .. 'Z']; 
	cr = 13; 
	lf = 10;
	all = [0..127]; 
	eol = lf | cr | cr lf ;
	not_eol = [all - [cr + lf]]; 

Tokens
	tab = 9;
	plus = '+';
	minus = '-';
	mult = '*';
	dmult = '**';
	mineq = '-=';
	diveq = '/=';
	div = '/';
	dot = '.';
	eq = '=';
	deq = '==';
	exclam = '!';
	dictt = 'dict';
	def = 'def';
	logic_plus = '&&';
	l_par = '(';
	r_par = ')';
	l_br = '[';
	r_br = ']';
	comma=',';
	qmark = '?';
	gqmark = ';';
	if = 'if';
	elif = 'elif';
	else = 'else';
	while = 'while';
	for = 'for';
	from = 'from';
	imp = 'import';
	assert = 'assert';
	as = 'as';
	print = 'print';
	return = 'return';
	in = 'in';
	less = '<';
	great = '>';
	dif = '!=';
	true = 'true';
	semi = ':';
	false = 'false';
	quote = '"';
	blank = (' ' | lf | cr);
	line_comment = '#' not_eol* eol; 
	number = digit+ | (digit+ '.' digit+);
	id = letter (letter | digit)*;
	string = '"'not_eol* '"';

Ignored Tokens
	blank, line_comment;

Productions
	goal = commands*;
	commands = {func}function | {state}statement;
	module = {simple} id | {complex} id dot module;
	function = def id l_par argument? r_par semi statement;
	argument = {simple} id | {val} id eq value | {recursive} id comma argument;
	
	statement = {if} [tab1]:tab* if [comp1]:comparison [semi1]:semi [st1]:statement|
			  	{while} [tab2]:tab* while [comp2]:comparison [semi2]:semi [st2]:statement|
				{for} [tab3]:tab* for [id1]:id in [id2]:id [semi3]:semi [st3]:statement|
				{return} [tab4]:tab* return [exp1]:expression|
				{print_simple} [tab5]:tab* [prnt1]:print [exp2]:expression |
				{print_complx} [tab6]:tab* [prnt2]:print [exp3]:expression comma [exp4]:expression|
				{equals} [tab7]:tab* [id3]:id [eq1]:eq [exp5]:expression|
				{subeq} [tab8]:tab* [id4]:id mineq [exp6]:expression|
				{diveq} [tab9]:tab* [id5]:id diveq [exp7]:expression|
				{list} [tab10]:tab* [id6]:id l_br [exp8]:expression r_br [eq2]:eq [exp9]:expression|
				{funccall} [tab11]:tab* function_call|
				{import} import;
	value = {func_call} id dot function_call | {number} number | {string} string;
	
	function_call = id l_par arglist? r_par;
	arglist = {simple} [exp1]:expression | {recursion} [exp2]:expression comma arglist;
	comparison = {great} [exp1]:expression great [exp2]:expression |
				 {less} [exp3]:expression less [exp4]:expression |
				 {dif} [exp5]:expression dif [exp6]:expression |
				 {eq} [exp7]:expression deq [exp8]:expression |
				 {true} true |
				 {false} false;
	import = imp module;
	expression = id;